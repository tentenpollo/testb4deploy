<!-- Ticket Details Modal -->
<div x-data="ticketDetailsModal()" x-show="isOpen" class="fixed inset-0 z-50 overflow-y-auto" x-cloak>
    <div class="flex items-center justify-center min-h-screen p-4">
        <!-- Modal Backdrop -->
        <div x-show="isOpen" x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100"
            x-transition:leave="transition ease-in duration-200" x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0" @click="closeModal()"
            class="fixed inset-0 bg-black bg-opacity-50"></div>

        <!-- Modal Content -->
        <div x-show="isOpen" x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 transform scale-95"
            x-transition:enter-end="opacity-100 transform scale-100"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 transform scale-100"
            x-transition:leave-end="opacity-0 transform scale-95"
            class="relative bg-white rounded-lg shadow-xl w-full max-w-5xl mx-auto max-h-[90vh] overflow-y-auto">
            
            <!-- Modal Header -->
            <div class="flex justify-between items-center p-4 border-b border-gray-200 sticky top-0 bg-white z-10">
                <h2 class="text-xl font-bold text-gray-800" x-text="'Ticket #' + (currentTicket?.id || '')"></h2>
                <div class="flex items-center space-x-4">
                    <button @click="archiveTicket()"
                        class="bg-amber-500 hover:bg-amber-600 text-white px-4 py-2 rounded">
                        <i class="fas fa-archive mr-2"></i>Archive
                    </button>
                    <button @click="closeModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
            </div>

            <div class="p-6 grid grid-cols-3 gap-6">
                <!-- Left Column - Ticket Details -->
                <div class="col-span-2 space-y-6">
                    <!-- Ticket Info -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-lg font-semibold mb-2" x-text="currentTicket?.title || 'Loading...'"></h3>
                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <p class="text-sm text-gray-600"><strong>Created:</strong> <span x-text="formatDate(currentTicket?.created_at)"></span></p>
                                <p class="text-sm text-gray-600"><strong>Status:</strong> <span x-text="currentTicket?.status || 'Unknown'"></span></p>
                                <p class="text-sm text-gray-600"><strong>Priority:</strong> <span x-text="currentTicket?.priority_name || 'Unknown'"></span></p>
                            </div>
                            <div>
                                <p class="text-sm text-gray-600"><strong>Category:</strong> <span x-text="currentTicket?.category_name || 'Unknown'"></span></p>
                                <p class="text-sm text-gray-600"><strong>Assigned To:</strong> <span x-text="currentTicket?.assigned_to_name || 'Unassigned'"></span></p>
                                <p class="text-sm text-gray-600"><strong>Created By:</strong> <span x-text="currentTicket?.created_by_name || 'Unknown'"></span></p>
                            </div>
                        </div>
                        <div>
                            <h4 class="font-medium mb-1">Description:</h4>
                            <div class="p-3 bg-white rounded border border-gray-200 text-sm" x-html="currentTicket?.description || 'No description provided.'"></div>
                        </div>
                    </div>

                    <!-- Ticket Activity Timeline -->
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Activity & Comments</h3>
                        <div class="space-y-4">
                            <template x-for="(activity, index) in ticketHistory" :key="index">
                                <div class="p-4 border border-gray-200 rounded-lg">
                                    <div class="flex justify-between items-start">
                                        <div class="flex items-center">
                                            <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                                                <span class="font-semibold text-blue-700" x-text="activity.user_name?.charAt(0) || 'U'"></span>
                                            </div>
                                            <div>
                                                <p class="font-medium" x-text="activity.user_name || 'Unknown User'"></p>
                                                <p class="text-xs text-gray-500" x-text="formatDate(activity.created_at)"></p>
                                            </div>
                                        </div>
                                        <div>
                                            <span class="text-xs px-2 py-1 rounded" 
                                                :class="{
                                                    'bg-purple-100 text-purple-800': activity.type === 'comment',
                                                    'bg-blue-100 text-blue-800': activity.type === 'status_change',
                                                    'bg-green-100 text-green-800': activity.type === 'assignment',
                                                    'bg-yellow-100 text-yellow-800': activity.type === 'attachment'
                                                }"
                                                x-text="activity.type"></span>
                                        </div>
                                    </div>
                                    
                                    <!-- Comment content -->
                                    <div class="mt-3 email-content bg-gray-50 p-3 rounded" x-show="activity.type === 'comment'" x-html="activity.content"></div>
                                    
                                    <!-- Status change -->
                                    <div class="mt-3 text-gray-700" x-show="activity.type === 'status_change'">
                                        Changed status from <span class="font-medium" x-text="activity.old_value"></span> to 
                                        <span class="font-medium" x-text="activity.new_value"></span>
                                    </div>
                                    
                                    <!-- Assignment -->
                                    <div class="mt-3 text-gray-700" x-show="activity.type === 'assignment'">
                                        Assigned ticket to <span class="font-medium" x-text="activity.new_value"></span>
                                    </div>
                                    
                                    <!-- Attachment -->
                                    <div class="mt-3" x-show="activity.type === 'attachment'">
                                        <div class="flex items-center p-2 bg-white border border-gray-200 rounded">
                                            <i class="fas fa-paperclip mr-2 text-gray-500"></i>
                                            <span class="text-blue-600 hover:underline cursor-pointer" x-text="activity.filename"></span>
                                            <span class="text-xs text-gray-500 ml-2" x-text="activity.filesize"></span>
                                        </div>
                                    </div>
                                </div>
                            </template>
                        </div>
                    </div>

                    <!-- Add Comment Section -->
                    <div class="bg-white border border-gray-200 rounded-lg p-4">
                        <h3 class="text-lg font-semibold mb-2">Add Response</h3>
                        
                        <!-- Rich Text Editor Toolbar -->
                        <div class="border border-gray-300 rounded-t-lg p-2 bg-gray-50 flex items-center space-x-2">
                            <button @click="formatText('bold')" class="p-1 hover:bg-gray-200 rounded" title="Bold">
                                <i class="fas fa-bold"></i>
                            </button>
                            <button @click="formatText('italic')" class="p-1 hover:bg-gray-200 rounded" title="Italic">
                                <i class="fas fa-italic"></i>
                            </button>
                            <button @click="formatText('underline')" class="p-1 hover:bg-gray-200 rounded" title="Underline">
                                <i class="fas fa-underline"></i>
                            </button>
                            <div class="h-6 border-r border-gray-300"></div>
                            <button @click="formatText('link')" class="p-1 hover:bg-gray-200 rounded" title="Insert Link">
                                <i class="fas fa-link"></i>
                            </button>
                            <button @click="addAttachment()" class="p-1 hover:bg-gray-200 rounded" title="Add Attachment">
                                <i class="fas fa-paperclip"></i>
                            </button>
                            <div class="h-6 border-r border-gray-300"></div>
                            <button @click="formatText('heading')" class="p-1 hover:bg-gray-200 rounded" title="Heading">
                                <i class="fas fa-heading"></i>
                            </button>
                            <button @click="formatText('list-ul')" class="p-1 hover:bg-gray-200 rounded" title="Bullet List">
                                <i class="fas fa-list-ul"></i>
                            </button>
                            <button @click="formatText('list-ol')" class="p-1 hover:bg-gray-200 rounded" title="Numbered List">
                                <i class="fas fa-list-ol"></i>
                            </button>
                        </div>
                        
                        <!-- Editor -->
                        <div class="border border-t-0 border-gray-300 rounded-b-lg p-3 min-h-[150px]" 
                             x-ref="commentEditor" 
                             contenteditable="true"
                             placeholder="Type your response here..."></div>

                        <!-- Attachments Preview -->
                        <div x-show="attachments.length > 0" class="mt-3 space-y-2">
                            <h4 class="text-sm font-medium">Attachments:</h4>
                            <template x-for="(attachment, index) in attachments" :key="index">
                                <div class="flex items-center justify-between bg-gray-50 p-2 rounded">
                                    <div class="flex items-center">
                                        <i class="fas fa-file mr-2 text-gray-500"></i>
                                        <span x-text="attachment.name"></span>
                                    </div>
                                    <button @click="removeAttachment(index)" class="text-red-500 hover:text-red-700">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </template>
                        </div>

                        <div class="flex justify-between mt-4">
                            <div>
                                <label class="inline-flex items-center">
                                    <input type="checkbox" x-model="isPrivateComment" class="rounded border-gray-300 text-blue-600">
                                    <span class="ml-2 text-sm text-gray-700">Mark as private (staff only)</span>
                                </label>
                            </div>
                            <button @click="submitComment()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">
                                Add Response
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Right Column - Ticket Actions and Settings -->
                <div class="col-span-1 space-y-6">
                    <!-- Status Change -->
                    <div class="bg-white border border-gray-200 rounded-lg p-4">
                        <h3 class="text-md font-semibold mb-3">Change Status</h3>
                        <select x-model="ticketStatus" class="w-full border border-gray-300 rounded px-3 py-2 mb-3">
                            <option value="unseen">Unseen</option>
                            <option value="seen">In Progress</option>
                            <option value="resolved">Resolved</option>
                            <option value="closed">Closed</option>
                        </select>
                        <button @click="updateTicketStatus()" class="w-full bg-green-600 hover:bg-green-700 text-white py-2 rounded">
                            Update Status
                        </button>
                    </div>

                    <!-- Priority Change -->
                    <div class="bg-white border border-gray-200 rounded-lg p-4">
                        <h3 class="text-md font-semibold mb-3">Change Priority</h3>
                        <select x-model="ticketPriority" class="w-full border border-gray-300 rounded px-3 py-2 mb-3">
                            <template x-for="priority in priorities" :key="priority.id">
                                <option :value="priority.id" x-text="priority.name"></option>
                            </template>
                        </select>
                        <button @click="updateTicketPriority()" class="w-full bg-yellow-600 hover:bg-yellow-700 text-white py-2 rounded">
                            Update Priority
                        </button>
                    </div>

                    <!-- Assignment -->
                    <div class="bg-white border border-gray-200 rounded-lg p-4">
                        <h3 class="text-md font-semibold mb-3">Assign Ticket</h3>
                        <select x-model="ticketAssignee" class="w-full border border-gray-300 rounded px-3 py-2 mb-3">
                            <option value="">Unassigned</option>
                            <template x-for="user in assignableUsers" :key="user.id">
                                <option :value="user.id" x-text="user.name"></option>
                            </template>
                        </select>
                        <button @click="assignTicket()" class="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 rounded">
                            Assign Ticket
                        </button>
                    </div>

                    <!-- Attachments -->
                    <div class="bg-white border border-gray-200 rounded-lg p-4">
                        <h3 class="text-md font-semibold mb-3">Attachments</h3>
                        <div x-show="ticketAttachments.length === 0" class="text-center py-4 text-gray-500">
                            No attachments found
                        </div>
                        <div x-show="ticketAttachments.length > 0" class="space-y-2">
                            <template x-for="(attachment, index) in ticketAttachments" :key="index">
                                <div class="flex items-center justify-between p-2 bg-gray-50 border border-gray-200 rounded">
                                    <div class="flex items-center">
                                        <i class="fas fa-file mr-2 text-gray-500"></i>
                                        <span class="text-blue-600 hover:underline cursor-pointer" x-text="attachment.filename"></span>
                                    </div>
                                    <button class="text-blue-600 hover:text-blue-800">
                                        <i class="fas fa-download"></i>
                                    </button>
                                </div>
                            </template>
                        </div>
                        <div class="mt-3">
                            <button @click="uploadAttachment()" class="w-full border border-gray-300 bg-gray-50 hover:bg-gray-100 text-gray-700 py-2 rounded flex items-center justify-center">
                                <i class="fas fa-upload mr-2"></i> Upload New Attachment
                            </button>
                        </div>
                    </div>

                    <!-- Ticket History -->
                    <div class="bg-white border border-gray-200 rounded-lg p-4">
                        <h3 class="text-md font-semibold mb-3">Ticket History</h3>
                        <div class="space-y-2 max-h-60 overflow-y-auto">
                            <template x-for="(event, index) in ticketHistory" :key="index">
                                <div class="text-xs p-2 border-b border-gray-100">
                                    <div class="flex justify-between">
                                        <span x-text="formatDate(event.created_at)"></span>
                                        <span x-text="event.type" class="font-medium"></span>
                                    </div>
                                    <div class="text-gray-600 mt-1" x-text="
                                        event.type === 'status_change' ? 
                                            'Status changed from ' + event.old_value + ' to ' + event.new_value : 
                                        event.type === 'assignment' ? 
                                            'Assigned to ' + event.new_value : 
                                        event.type === 'comment' ? 
                                            'Comment added by ' + event.user_name : 
                                        event.type === 'attachment' ? 
                                            'Attachment added: ' + event.filename : 
                                            event.description || 'No description'
                                    "></div>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden file input for attachments -->
<input type="file" id="attachment-input" class="hidden" multiple @change="handleFileInputChange($event)" />

<script>
    function ticketDetailsModal() {
        return {
            isOpen: false,
            currentTicket: null,
            ticketId: null,
            ticketStatus: '',
            ticketPriority: '',
            ticketAssignee: '',
            isPrivateComment: false,
            ticketHistory: [],
            ticketAttachments: [],
            attachments: [],
            priorities: window.prioritiesData || [],
            assignableUsers: window.assignableUsersData || [],

            init() {
                // Add this line to make the modal function globally available
                window.openTicketDetails = this.openModal.bind(this);
            },

            openModal(ticketId) {
                this.isOpen = true;
                this.ticketId = ticketId;
                this.fetchTicketDetails(ticketId);
                document.body.classList.add('overflow-hidden');
            },

            closeModal() {
                this.isOpen = false;
                this.currentTicket = null;
                this.ticketHistory = [];
                this.ticketAttachments = [];
                this.attachments = [];
                document.body.classList.remove('overflow-hidden');
            },

            fetchTicketDetails(ticketId) {
                // In a real implementation, you would make an AJAX call here
                // For now, we'll use the data from the page
                const ticket = window.ticketsData.find(t => t.id == ticketId);
                
                if (ticket) {
                    this.currentTicket = ticket;
                    this.ticketStatus = ticket.status;
                    this.ticketPriority = ticket.priority_id;
                    this.ticketAssignee = ticket.assigned_to || '';
                    
                    // Fetch additional data
                    this.fetchTicketHistory(ticketId);
                    this.fetchTicketAttachments(ticketId);
                } else {
                    this.showNotification('Ticket not found', 'error');
                }
            },

            fetchTicketHistory(ticketId) {
                // In a real implementation, this would be an AJAX call
                // Example mock data
                this.ticketHistory = [
                    {
                        type: 'status_change',
                        user_name: 'John Admin',
                        created_at: '2025-03-08T14:30:00',
                        old_value: 'unseen',
                        new_value: 'seen',
                        description: 'Status changed from unseen to seen'
                    },
                    {
                        type: 'assignment',
                        user_name: 'John Admin',
                        created_at: '2025-03-08T14:31:00',
                        old_value: null,
                        new_value: 'Jane Smith',
                        description: 'Assigned to Jane Smith'
                    },
                    {
                        type: 'comment',
                        user_name: 'Jane Smith',
                        created_at: '2025-03-08T15:20:00',
                        content: '<p>I am working on this issue. Will update soon.</p>',
                        is_private: false
                    },
                    {
                        type: 'attachment',
                        user_name: 'Jane Smith',
                        created_at: '2025-03-08T15:25:00',
                        filename: 'screenshot.png',
                        filesize: '245 KB'
                    },
                    {
                        type: 'comment',
                        user_name: 'John Doe',
                        created_at: '2025-03-09T09:10:00',
                        content: '<p>Any updates on this? I&#39;m still experiencing the issue.</p>',
                        is_private: false
                    },
                    {
                        type: 'comment',
                        user_name: 'Jane Smith',
                        created_at: '2025-03-09T10:45:00',
                        content: '<p>Hi John,</p><p>I&#39;ve identified the problem and implemented a fix. Please try again and let me know if the issue persists.</p><p><strong>Technical details:</strong></p><ul><li>Fixed database connection timeout</li><li>Updated cache configuration</li></ul>',
                        is_private: false
                    }
                ];
            },

            fetchTicketAttachments(ticketId) {
                // Mock data for attachments
                this.ticketAttachments = [
                    {
                        id: 1,
                        ticket_id: ticketId,
                        filename: 'screenshot.png',
                        filesize: '245 KB',
                        upload_date: '2025-03-08T15:25:00'
                    },
                    {
                        id: 2,
                        ticket_id: ticketId,
                        filename: 'error_log.txt',
                        filesize: '34 KB',
                        upload_date: '2025-03-08T15:26:00'
                    }
                ];
            },

            updateTicketStatus() {
                // In a real implementation, this would be an AJAX call
                // For demonstration purposes:
                const oldStatus = this.currentTicket.status;
                this.currentTicket.status = this.ticketStatus;
                
                // Add to history
                this.ticketHistory.unshift({
                    type: 'status_change',
                    user_name: 'Current User', // In real implementation, get from session
                    created_at: new Date().toISOString(),
                    old_value: oldStatus,
                    new_value: this.ticketStatus,
                    description: `Status changed from ${oldStatus} to ${this.ticketStatus}`
                });
                
                this.showNotification('Status updated successfully', 'success');
            },

            updateTicketPriority() {
                // Similar to updateTicketStatus
                const oldPriorityId = this.currentTicket.priority_id;
                const oldPriorityName = this.priorities.find(p => p.id == oldPriorityId)?.name || 'Unknown';
                const newPriorityName = this.priorities.find(p => p.id == this.ticketPriority)?.name || 'Unknown';
                
                this.currentTicket.priority_id = this.ticketPriority;
                this.currentTicket.priority_name = newPriorityName;
                
                // Add to history
                this.ticketHistory.unshift({
                    type: 'priority_change',
                    user_name: 'Current User',
                    created_at: new Date().toISOString(),
                    old_value: oldPriorityName,
                    new_value: newPriorityName,
                    description: `Priority changed from ${oldPriorityName} to ${newPriorityName}`
                });
                
                this.showNotification('Priority updated successfully', 'success');
            },

            assignTicket() {
                const oldAssigneeId = this.currentTicket.assigned_to;
                const oldAssigneeName = this.assignableUsers.find(u => u.id == oldAssigneeId)?.name || 'Unassigned';
                const newAssigneeName = this.assignableUsers.find(u => u.id == this.ticketAssignee)?.name || 'Unassigned';
                
                this.currentTicket.assigned_to = this.ticketAssignee;
                this.currentTicket.assigned_to_name = newAssigneeName;
                
                // Add to history
                this.ticketHistory.unshift({
                    type: 'assignment',
                    user_name: 'Current User',
                    created_at: new Date().toISOString(),
                    old_value: oldAssigneeName,
                    new_value: newAssigneeName,
                    description: `Assigned to ${newAssigneeName}`
                });
                
                this.showNotification('Ticket assigned successfully', 'success');
            },

            submitComment() {
                const commentContent = this.$refs.commentEditor.innerHTML;
                
                if (!commentContent.trim()) {
                    this.showNotification('Please enter a comment', 'error');
                    return;
                }
                
                // Add comment to history
                this.ticketHistory.unshift({
                    type: 'comment',
                    user_name: 'Current User', // In real implementation, get from session
                    created_at: new Date().toISOString(),
                    content: commentContent,
                    is_private: this.isPrivateComment
                });
                
                // Handle attachments if any
                this.attachments.forEach(attachment => {
                    this.ticketHistory.unshift({
                        type: 'attachment',
                        user_name: 'Current User',
                        created_at: new Date().toISOString(),
                        filename: attachment.name,
                        filesize: this.formatFileSize(attachment.size)
                    });
                    
                    this.ticketAttachments.push({
                        id: Date.now(), // Just for mock data
                        ticket_id: this.ticketId,
                        filename: attachment.name,
                        filesize: this.formatFileSize(attachment.size),
                        upload_date: new Date().toISOString()
                    });
                });
                
                // Clear editor and attachments
                this.$refs.commentEditor.innerHTML = '';
                this.attachments = [];
                this.isPrivateComment = false;
                
                this.showNotification('Response added successfully', 'success');
            },

            formatText(command) {
                // Simple rich text formatting
                switch (command) {
                    case 'bold':
                        document.execCommand('bold');
                        break;
                    case 'italic':
                        document.execCommand('italic');
                        break;
                    case 'underline':
                        document.execCommand('underline');
                        break;
                    case 'link':
                        const url = prompt('Enter the URL:');
                        if (url) document.execCommand('createLink', false, url);
                        break;
                    case 'heading':
                        document.execCommand('formatBlock', false, '<h4>');
                        break;
                    case 'list-ul':
                        document.execCommand('insertUnorderedList');
                        break;
                    case 'list-ol':
                        document.execCommand('insertOrderedList');
                        break;
                }
                this.$refs.commentEditor.focus();
            },

            addAttachment() {
                document.getElementById('attachment-input').click();
            },

            handleFileInputChange(event) {
                const files = event.target.files;
                if (files.length > 0) {
                    for (let i = 0; i < files.length; i++) {
                        this.attachments.push(files[i]);
                    }
                    // Reset file input
                    event.target.value = '';
                }
            },

            removeAttachment(index) {
                this.attachments.splice(index, 1);
            },

            uploadAttachment() {
                document.getElementById('attachment-input').click();
            },

            archiveTicket() {
                // In a real implementation, this would update the ticket's status to archived
                this.showNotification('Ticket archived successfully', 'success');
                this.closeModal();
            },

            formatFileSize(bytes) {
                if (bytes < 1024) return bytes + ' B';
                else if (bytes < 1048576) return (bytes / 1024).toFixed(0) + ' KB';
                else return (bytes / 1048576).toFixed(1) + ' MB';
            },

            formatDate(datetime) {
                if (!datetime) return 'Unknown';
                
                const date = new Date(datetime);
                const now = new Date();
                const diff = now - date;

                const seconds = Math.floor(diff / 1000);
                const minutes = Math.floor(seconds / 60);
                const hours = Math.floor(minutes / 60);
                const days = Math.floor(hours / 24);

                if (days > 7) {
                    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                } else if (days > 0) {
                    return `${days} day${days > 1 ? 's' : ''} ago`;
                } else if (hours > 0) {
                    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
                } else if (minutes > 0) {
                    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
                } else {
                    return 'just now';
                }
            },

            showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.classList.add(
                    'fixed', 'top-4', 'right-4', 'z-50', 'px-4', 'py-2', 'rounded', 'text-white',
                    type === 'success' ? 'bg-green-500' : 'bg-red-500'
                );
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                // Auto-remove notification after 3 seconds
                setTimeout(() => {
                    notification.classList.add('opacity-0', 'transition-opacity', 'duration-500');
                    setTimeout(() => {
                        document.body.removeChild(notification);
                    }, 500);
                }, 3000);
            }